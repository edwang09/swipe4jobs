{"version":3,"sources":["layouts/header.js","pages/about.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAoCeA,MAhCf,WACE,OACE,4BAAQC,UAAU,UACd,yBAAKA,UAAU,QACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,SAAf,SACA,yBAAKA,UAAU,QAAf,KACA,yBAAKA,UAAU,QAAf,SAEJ,yBAAKA,UAAU,YAAf,iCAKJ,6BACI,wBAAIA,UAAU,gBACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,iBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,aAER,wBAAID,UAAU,WACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,gBCLLC,MAvBf,WACE,OACE,yBAAKF,UAAU,SACX,qCACA,yHACA,iEACA,+FACA,uGACA,4DACA,+DACA,mKACA,qGACA,6GACA,4BACI,iEACA,kEACA,4FCSGG,MAlBf,WACE,OACE,yBAAKH,UAAU,OACf,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCNQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4dd7ba45.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n        <div className=\"logo\">\r\n            <div className=\"title\">\r\n                <div className=\"swipe\">SWIPE</div>\r\n                <div className=\"four\">4</div>\r\n                <div className=\"jobs\">JOBS</div>\r\n            </div>\r\n            <div className=\"subtitle\">\r\n                Reinventing the Career Wheel    \r\n            </div>\r\n        </div>\r\n\r\n        <nav>\r\n            <ul className=\"secondarynav\">\r\n                <li><Link to=\"/\">FAQ</Link></li>\r\n                <li><Link to=\"/\">Terms of Use</Link></li>\r\n                <li><Link to=\"/\">Contact</Link></li>\r\n            </ul>\r\n            <ul className=\"mainnav\">\r\n                <li><Link to=\"/\">HOME</Link></li>\r\n                <li><Link to=\"/about\">ABOUT</Link></li>\r\n                <li><Link to=\"/\">SEARCH</Link></li>\r\n                <li><Link to=\"/\">POST</Link></li>\r\n                <li><Link to=\"/\">PRICING</Link></li>\r\n            </ul>\r\n        </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nfunction About() {\r\n  return (\r\n    <div className=\"about\">\r\n        <h3>ABOUT</h3>\r\n        <p>Our highest priority is to maximize the amount of time your posting remains on Page One.  </p>\r\n        <p>Search protocols are optimized.   </p>\r\n        <p>Postings will oftentimes appear on Page One, 27 out of 30 days. </p>\r\n        <p>Swipe 4 Jobs Key Words and Key Phrases methodology streamlines Searches.</p>\r\n        <p>View the FAQ for elaboration.</p>\r\n        <h5>Contract Jobs vs Permanent Jobs</h5>\r\n        <p>It is estimated that in ten years, the number of hires for Contract Jobs will be on par with the number of hires for Permanent Jobs.</p>\r\n        <p>For Employers, SWIPE 4 JOBS maintains a singular registration module. </p>\r\n        <p>This singular format provides 3 alternative posting options for the Employer. </p>\r\n        <ul>\r\n            <li>The ability to post Contract Jobs</li>\r\n            <li>The ability to post Permanent Jobs</li>\r\n            <li>The ability to post both Contract Jobs and Permanent Jobs</li>\r\n        </ul>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Header from \"./layouts/header\"\nimport About from \"./pages/about\"\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n        <Header/>\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <About />\n          </Route>\n        </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}